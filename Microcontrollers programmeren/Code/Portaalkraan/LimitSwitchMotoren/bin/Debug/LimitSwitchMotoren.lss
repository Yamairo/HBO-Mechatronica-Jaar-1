
bin\Debug\LimitSwitchMotoren.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  000005d2  00000686  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800200  00800200  00000686  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000686  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  00000689  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000069c  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 00000078  00000000  00000000  000006e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00000e59  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00000c7c  00000000  00000000  000015b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   000005b1  00000000  00000000  0000222d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  000001ac  00000000  00000000  000027e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00000594  00000000  00000000  0000298c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 00000137  00000000  00000000  00002f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__vector_1>
   8:	0c 94 a2 02 	jmp	0x544	; 0x544 <__vector_2>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  bc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  cc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  dc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  e0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.Loc.5>

000000fc <.Loc.4>:
  fc:	1d 92       	st	X+, r1

000000fe <.Loc.5>:
  fe:	a9 30       	cpi	r26, 0x09	; 9

00000100 <.Loc.6>:
 100:	b2 07       	cpc	r27, r18

00000102 <.Loc.7>:
 102:	e1 f7       	brne	.-8      	; 0xfc <.Loc.4>

00000104 <L0^A>:
 104:	0e 94 de 02 	call	0x5bc	; 0x5bc <main>
 108:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <init>:
volatile int knop_m = 0;

volatile int richting;

int init(void)
{
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62

00000118 <.Loc.1>:
    DDRB |=(1<<PB7);
 118:	84 e2       	ldi	r24, 0x24	; 36
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	fc 01       	movw	r30, r24
 11e:	20 81       	ld	r18, Z
 120:	84 e2       	ldi	r24, 0x24	; 36
 122:	90 e0       	ldi	r25, 0x00	; 0

00000124 <.Loc.2>:
 124:	20 68       	ori	r18, 0x80	; 128
 126:	fc 01       	movw	r30, r24
 128:	20 83       	st	Z, r18

0000012a <.Loc.3>:

    DDRL |=(1<<PL5); //RPWM PL5
 12a:	8a e0       	ldi	r24, 0x0A	; 10
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	fc 01       	movw	r30, r24
 130:	20 81       	ld	r18, Z
 132:	8a e0       	ldi	r24, 0x0A	; 10
 134:	91 e0       	ldi	r25, 0x01	; 1

00000136 <.Loc.4>:
 136:	20 62       	ori	r18, 0x20	; 32
 138:	fc 01       	movw	r30, r24
 13a:	20 83       	st	Z, r18

0000013c <.Loc.5>:
    DDRL |=(1<<PL3); //LPWM PL3
 13c:	8a e0       	ldi	r24, 0x0A	; 10
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	fc 01       	movw	r30, r24
 142:	20 81       	ld	r18, Z
 144:	8a e0       	ldi	r24, 0x0A	; 10
 146:	91 e0       	ldi	r25, 0x01	; 1

00000148 <.Loc.6>:
 148:	28 60       	ori	r18, 0x08	; 8
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18

0000014e <.Loc.7>:
    DDRA |=(1<<PA0); //5 volt aan
 14e:	81 e2       	ldi	r24, 0x21	; 33
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	fc 01       	movw	r30, r24
 154:	20 81       	ld	r18, Z
 156:	81 e2       	ldi	r24, 0x21	; 33
 158:	90 e0       	ldi	r25, 0x00	; 0

0000015a <.Loc.8>:
 15a:	21 60       	ori	r18, 0x01	; 1
 15c:	fc 01       	movw	r30, r24
 15e:	20 83       	st	Z, r18

00000160 <.Loc.9>:

    DDRF &=~(1<<PF1);
 160:	80 e3       	ldi	r24, 0x30	; 48
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	fc 01       	movw	r30, r24
 166:	20 81       	ld	r18, Z

00000168 <.Loc.10>:
 168:	80 e3       	ldi	r24, 0x30	; 48
 16a:	90 e0       	ldi	r25, 0x00	; 0

0000016c <.Loc.11>:
 16c:	2d 7f       	andi	r18, 0xFD	; 253
 16e:	fc 01       	movw	r30, r24
 170:	20 83       	st	Z, r18

00000172 <.Loc.12>:
    DDRF &=~(1<<PF2);
 172:	80 e3       	ldi	r24, 0x30	; 48
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	fc 01       	movw	r30, r24
 178:	20 81       	ld	r18, Z

0000017a <.Loc.13>:
 17a:	80 e3       	ldi	r24, 0x30	; 48
 17c:	90 e0       	ldi	r25, 0x00	; 0

0000017e <.Loc.14>:
 17e:	2b 7f       	andi	r18, 0xFB	; 251
 180:	fc 01       	movw	r30, r24
 182:	20 83       	st	Z, r18

00000184 <.Loc.15>:
    DDRF &=~(1<<PF3);
 184:	80 e3       	ldi	r24, 0x30	; 48
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	fc 01       	movw	r30, r24
 18a:	20 81       	ld	r18, Z

0000018c <.Loc.16>:
 18c:	80 e3       	ldi	r24, 0x30	; 48
 18e:	90 e0       	ldi	r25, 0x00	; 0

00000190 <.Loc.17>:
 190:	27 7f       	andi	r18, 0xF7	; 247
 192:	fc 01       	movw	r30, r24
 194:	20 83       	st	Z, r18

00000196 <.Loc.18>:

    //magneet
    DDRB |= (1<<PB7); //LED D1
 196:	84 e2       	ldi	r24, 0x24	; 36
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	fc 01       	movw	r30, r24
 19c:	20 81       	ld	r18, Z
 19e:	84 e2       	ldi	r24, 0x24	; 36
 1a0:	90 e0       	ldi	r25, 0x00	; 0

000001a2 <.Loc.19>:
 1a2:	20 68       	ori	r18, 0x80	; 128
 1a4:	fc 01       	movw	r30, r24
 1a6:	20 83       	st	Z, r18

000001a8 <.Loc.20>:
    DDRL |= (1<<PL2); //port 47
 1a8:	8a e0       	ldi	r24, 0x0A	; 10
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	fc 01       	movw	r30, r24
 1ae:	20 81       	ld	r18, Z
 1b0:	8a e0       	ldi	r24, 0x0A	; 10
 1b2:	91 e0       	ldi	r25, 0x01	; 1

000001b4 <.Loc.21>:
 1b4:	24 60       	ori	r18, 0x04	; 4
 1b6:	fc 01       	movw	r30, r24
 1b8:	20 83       	st	Z, r18

000001ba <.Loc.22>:
    DDRL |= (1<<PL0); //Port 49 knop magneet
 1ba:	8a e0       	ldi	r24, 0x0A	; 10
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	fc 01       	movw	r30, r24
 1c0:	20 81       	ld	r18, Z
 1c2:	8a e0       	ldi	r24, 0x0A	; 10
 1c4:	91 e0       	ldi	r25, 0x01	; 1

000001c6 <.Loc.23>:
 1c6:	21 60       	ori	r18, 0x01	; 1
 1c8:	fc 01       	movw	r30, r24
 1ca:	20 83       	st	Z, r18

000001cc <.Loc.24>:

    // knop motor
    DDRB |= (1<<PB0);   //53 omlaag LPWM
 1cc:	84 e2       	ldi	r24, 0x24	; 36
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	fc 01       	movw	r30, r24
 1d2:	20 81       	ld	r18, Z
 1d4:	84 e2       	ldi	r24, 0x24	; 36
 1d6:	90 e0       	ldi	r25, 0x00	; 0

000001d8 <.Loc.25>:
 1d8:	21 60       	ori	r18, 0x01	; 1
 1da:	fc 01       	movw	r30, r24
 1dc:	20 83       	st	Z, r18

000001de <.Loc.26>:
    DDRB |= (1<<PB2);   //51 omhoog RPWM
 1de:	84 e2       	ldi	r24, 0x24	; 36
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	fc 01       	movw	r30, r24
 1e4:	20 81       	ld	r18, Z
 1e6:	84 e2       	ldi	r24, 0x24	; 36
 1e8:	90 e0       	ldi	r25, 0x00	; 0

000001ea <.Loc.27>:
 1ea:	24 60       	ori	r18, 0x04	; 4
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 83       	st	Z, r18

000001f0 <.Loc.28>:

    // limit switch
    DDRC |= (1<<PC6);
 1f0:	87 e2       	ldi	r24, 0x27	; 39
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	fc 01       	movw	r30, r24
 1f6:	20 81       	ld	r18, Z
 1f8:	87 e2       	ldi	r24, 0x27	; 39
 1fa:	90 e0       	ldi	r25, 0x00	; 0

000001fc <.Loc.29>:
 1fc:	20 64       	ori	r18, 0x40	; 64
 1fe:	fc 01       	movw	r30, r24
 200:	20 83       	st	Z, r18

00000202 <.Loc.30>:
}
 202:	00 00       	nop
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	08 95       	ret

0000020a <beweegLinks>:

int beweegLinks(void)
{
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	cd b7       	in	r28, 0x3d	; 61
 210:	de b7       	in	r29, 0x3e	; 62

00000212 <.Loc.32>:
    PORTL &= ~(1<<PL3); //LPWM PL3
 212:	8b e0       	ldi	r24, 0x0B	; 11
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	fc 01       	movw	r30, r24
 218:	20 81       	ld	r18, Z

0000021a <.Loc.33>:
 21a:	8b e0       	ldi	r24, 0x0B	; 11
 21c:	91 e0       	ldi	r25, 0x01	; 1

0000021e <.Loc.34>:
 21e:	27 7f       	andi	r18, 0xF7	; 247
 220:	fc 01       	movw	r30, r24
 222:	20 83       	st	Z, r18

00000224 <.Loc.35>:
    PORTL |= (1<<PL5);
 224:	8b e0       	ldi	r24, 0x0B	; 11
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	fc 01       	movw	r30, r24
 22a:	20 81       	ld	r18, Z
 22c:	8b e0       	ldi	r24, 0x0B	; 11
 22e:	91 e0       	ldi	r25, 0x01	; 1

00000230 <.Loc.36>:
 230:	20 62       	ori	r18, 0x20	; 32
 232:	fc 01       	movw	r30, r24
 234:	20 83       	st	Z, r18

00000236 <.Loc.37>:
    richting = -1;
 236:	8f ef       	ldi	r24, 0xFF	; 255
 238:	9f ef       	ldi	r25, 0xFF	; 255
 23a:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <richting+0x1>
 23e:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <richting>

00000242 <.Loc.38>:
}
 242:	00 00       	nop
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	08 95       	ret

0000024a <beweegRechts>:

int beweegRechts(void)
{
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	cd b7       	in	r28, 0x3d	; 61
 250:	de b7       	in	r29, 0x3e	; 62

00000252 <.Loc.40>:
    PORTL &= ~(1<<PL5); //RPWM PL5
 252:	8b e0       	ldi	r24, 0x0B	; 11
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	fc 01       	movw	r30, r24
 258:	20 81       	ld	r18, Z

0000025a <.Loc.41>:
 25a:	8b e0       	ldi	r24, 0x0B	; 11
 25c:	91 e0       	ldi	r25, 0x01	; 1

0000025e <.Loc.42>:
 25e:	2f 7d       	andi	r18, 0xDF	; 223
 260:	fc 01       	movw	r30, r24
 262:	20 83       	st	Z, r18

00000264 <.Loc.43>:
    PORTL |= (1<<PL3);
 264:	8b e0       	ldi	r24, 0x0B	; 11
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	fc 01       	movw	r30, r24
 26a:	20 81       	ld	r18, Z
 26c:	8b e0       	ldi	r24, 0x0B	; 11
 26e:	91 e0       	ldi	r25, 0x01	; 1

00000270 <.Loc.44>:
 270:	28 60       	ori	r18, 0x08	; 8
 272:	fc 01       	movw	r30, r24
 274:	20 83       	st	Z, r18

00000276 <.Loc.45>:
    richting = 1;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <richting+0x1>
 27e:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <richting>

00000282 <.Loc.46>:
}
 282:	00 00       	nop
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <stop>:

int stop(void)
{
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62

00000292 <.Loc.48>:
    PORTL |= (1 << PL3);
 292:	8b e0       	ldi	r24, 0x0B	; 11
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	fc 01       	movw	r30, r24
 298:	20 81       	ld	r18, Z
 29a:	8b e0       	ldi	r24, 0x0B	; 11
 29c:	91 e0       	ldi	r25, 0x01	; 1

0000029e <.Loc.49>:
 29e:	28 60       	ori	r18, 0x08	; 8
 2a0:	fc 01       	movw	r30, r24
 2a2:	20 83       	st	Z, r18

000002a4 <.Loc.50>:
    PORTL |= (1 << PL5);
 2a4:	8b e0       	ldi	r24, 0x0B	; 11
 2a6:	91 e0       	ldi	r25, 0x01	; 1
 2a8:	fc 01       	movw	r30, r24
 2aa:	20 81       	ld	r18, Z
 2ac:	8b e0       	ldi	r24, 0x0B	; 11
 2ae:	91 e0       	ldi	r25, 0x01	; 1

000002b0 <.Loc.51>:
 2b0:	20 62       	ori	r18, 0x20	; 32
 2b2:	fc 01       	movw	r30, r24
 2b4:	20 83       	st	Z, r18

000002b6 <.Loc.52>:
}
 2b6:	00 00       	nop
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <toggleRechts>:

//toggle rechts
int toggleRechts(void)
{
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	cd b7       	in	r28, 0x3d	; 61
 2c4:	de b7       	in	r29, 0x3e	; 62

000002c6 <.Loc.54>:
    /*
    Toggled de Rechter motor aan of uit
    int rechts
    int knop_R
    */
    if (!(PINB &(1<<PB0))==0)
 2c6:	83 e2       	ldi	r24, 0x23	; 35
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	fc 01       	movw	r30, r24
 2cc:	80 81       	ld	r24, Z

000002ce <.Loc.55>:
 2ce:	88 2f       	mov	r24, r24
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	81 70       	andi	r24, 0x01	; 1
 2d4:	99 27       	eor	r25, r25

000002d6 <.Loc.56>:
 2d6:	00 97       	sbiw	r24, 0x00	; 0
 2d8:	99 f0       	breq	.+38     	; 0x300 <.L6>

000002da <.Loc.57>:
    {
        richting = 1;
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <richting+0x1>
 2e2:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <richting>

000002e6 <.Loc.58>:
        if (!knop_R)
 2e6:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <knop_R>
 2ea:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <knop_R+0x1>

000002ee <.Loc.59>:
 2ee:	00 97       	sbiw	r24, 0x00	; 0
 2f0:	41 f5       	brne	.+80     	; 0x342 <.L7>

000002f2 <.Loc.60>:
            {
                knop_R = 1;
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <knop_R+0x1>
 2fa:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <knop_R>
 2fe:	21 c0       	rjmp	.+66     	; 0x342 <.L7>

00000300 <.L6>:
            }
    }
    else
    {
        richting = 0;
 300:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <richting+0x1>
 304:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <richting>

00000308 <.Loc.62>:
        if (knop_R)
 308:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <knop_R>
 30c:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <knop_R+0x1>

00000310 <.Loc.63>:
 310:	00 97       	sbiw	r24, 0x00	; 0
 312:	b9 f0       	breq	.+46     	; 0x342 <.L7>

00000314 <.Loc.64>:
        {
            knop_R = 0;
 314:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <knop_R+0x1>
 318:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <knop_R>

0000031c <.Loc.65>:
            PORTL ^=(1<<PL5); //RPWM PL5
 31c:	8b e0       	ldi	r24, 0x0B	; 11
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	fc 01       	movw	r30, r24
 322:	30 81       	ld	r19, Z
 324:	8b e0       	ldi	r24, 0x0B	; 11
 326:	91 e0       	ldi	r25, 0x01	; 1

00000328 <.Loc.66>:
 328:	20 e2       	ldi	r18, 0x20	; 32
 32a:	23 27       	eor	r18, r19
 32c:	fc 01       	movw	r30, r24
 32e:	20 83       	st	Z, r18

00000330 <.Loc.67>:
            PORTL |=(1<<PL3); //LPWM PL3
 330:	8b e0       	ldi	r24, 0x0B	; 11
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	fc 01       	movw	r30, r24
 336:	20 81       	ld	r18, Z
 338:	8b e0       	ldi	r24, 0x0B	; 11
 33a:	91 e0       	ldi	r25, 0x01	; 1

0000033c <.Loc.68>:
 33c:	28 60       	ori	r18, 0x08	; 8
 33e:	fc 01       	movw	r30, r24
 340:	20 83       	st	Z, r18

00000342 <.L7>:
        }
    }
}
 342:	00 00       	nop
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	08 95       	ret

0000034a <toggleLinks>:

                                                //togglelinks
int toggleLinks(void)
{
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	cd b7       	in	r28, 0x3d	; 61
 350:	de b7       	in	r29, 0x3e	; 62

00000352 <.Loc.71>:
    /*
    Toggled de linker motor aan of uit
    int links
    int knop_L
    */
    if (!(PINB & (1<<PB2))==0)
 352:	83 e2       	ldi	r24, 0x23	; 35
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	fc 01       	movw	r30, r24
 358:	80 81       	ld	r24, Z

0000035a <.Loc.72>:
 35a:	88 2f       	mov	r24, r24
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	84 70       	andi	r24, 0x04	; 4
 360:	99 27       	eor	r25, r25

00000362 <.Loc.73>:
 362:	00 97       	sbiw	r24, 0x00	; 0
 364:	99 f0       	breq	.+38     	; 0x38c <.L9>

00000366 <.Loc.74>:
    {
        richting = -1;
 366:	8f ef       	ldi	r24, 0xFF	; 255
 368:	9f ef       	ldi	r25, 0xFF	; 255
 36a:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <richting+0x1>
 36e:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <richting>

00000372 <.Loc.75>:
        if (!knop_L)
 372:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <knop_L>
 376:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <knop_L+0x1>

0000037a <.Loc.76>:
 37a:	00 97       	sbiw	r24, 0x00	; 0
 37c:	41 f5       	brne	.+80     	; 0x3ce <.L10>

0000037e <.Loc.77>:
            {
                knop_L = 1;
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <knop_L+0x1>
 386:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <knop_L>
 38a:	21 c0       	rjmp	.+66     	; 0x3ce <.L10>

0000038c <.L9>:
            }
    }
    else
    {
        richting = 0;
 38c:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <richting+0x1>
 390:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <richting>

00000394 <.Loc.79>:
        if (knop_L)
 394:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <knop_L>
 398:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <knop_L+0x1>

0000039c <.Loc.80>:
 39c:	00 97       	sbiw	r24, 0x00	; 0
 39e:	b9 f0       	breq	.+46     	; 0x3ce <.L10>

000003a0 <.Loc.81>:
        {
            knop_L = 0;
 3a0:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <knop_L+0x1>
 3a4:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <knop_L>

000003a8 <.Loc.82>:
            PORTL ^=(1<<PL3); //RPWM PL5
 3a8:	8b e0       	ldi	r24, 0x0B	; 11
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	fc 01       	movw	r30, r24
 3ae:	30 81       	ld	r19, Z
 3b0:	8b e0       	ldi	r24, 0x0B	; 11
 3b2:	91 e0       	ldi	r25, 0x01	; 1

000003b4 <.Loc.83>:
 3b4:	28 e0       	ldi	r18, 0x08	; 8
 3b6:	23 27       	eor	r18, r19
 3b8:	fc 01       	movw	r30, r24
 3ba:	20 83       	st	Z, r18

000003bc <.Loc.84>:
            PORTL |=(1<<PL5); //LPWM PL3
 3bc:	8b e0       	ldi	r24, 0x0B	; 11
 3be:	91 e0       	ldi	r25, 0x01	; 1
 3c0:	fc 01       	movw	r30, r24
 3c2:	20 81       	ld	r18, Z
 3c4:	8b e0       	ldi	r24, 0x0B	; 11
 3c6:	91 e0       	ldi	r25, 0x01	; 1

000003c8 <.Loc.85>:
 3c8:	20 62       	ori	r18, 0x20	; 32
 3ca:	fc 01       	movw	r30, r24
 3cc:	20 83       	st	Z, r18

000003ce <.L10>:
        }
    }
}
 3ce:	00 00       	nop
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	08 95       	ret

000003d6 <toggleMagneet>:

                                                //magneet
int toggleMagneet(void)
{
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	cd b7       	in	r28, 0x3d	; 61
 3dc:	de b7       	in	r29, 0x3e	; 62

000003de <.Loc.88>:
    if (!(PINL & (1<<PL0))==0)
 3de:	89 e0       	ldi	r24, 0x09	; 9
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	fc 01       	movw	r30, r24
 3e4:	80 81       	ld	r24, Z

000003e6 <.Loc.89>:
 3e6:	88 2f       	mov	r24, r24
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	81 70       	andi	r24, 0x01	; 1
 3ec:	99 27       	eor	r25, r25

000003ee <.Loc.90>:
 3ee:	00 97       	sbiw	r24, 0x00	; 0
 3f0:	69 f0       	breq	.+26     	; 0x40c <.L12>

000003f2 <.Loc.91>:
    {
        if (!knop_m)
 3f2:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <knop_m>
 3f6:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <knop_m+0x1>

000003fa <.Loc.92>:
 3fa:	00 97       	sbiw	r24, 0x00	; 0
 3fc:	d9 f4       	brne	.+54     	; 0x434 <.L13>

000003fe <.Loc.93>:
            {
                knop_m = 1;
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <knop_m+0x1>
 406:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <knop_m>
 40a:	14 c0       	rjmp	.+40     	; 0x434 <.L13>

0000040c <.L12>:
            }
    }
    else
    {
        if (knop_m)
 40c:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <knop_m>
 410:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <knop_m+0x1>

00000414 <.Loc.95>:
 414:	00 97       	sbiw	r24, 0x00	; 0
 416:	71 f0       	breq	.+28     	; 0x434 <.L13>

00000418 <.Loc.96>:
        {
            knop_m = 0;
 418:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <knop_m+0x1>
 41c:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <knop_m>

00000420 <.Loc.97>:
            PORTL ^=(1<<PL2); //magneet
 420:	8b e0       	ldi	r24, 0x0B	; 11
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	fc 01       	movw	r30, r24
 426:	30 81       	ld	r19, Z
 428:	8b e0       	ldi	r24, 0x0B	; 11
 42a:	91 e0       	ldi	r25, 0x01	; 1

0000042c <.Loc.98>:
 42c:	24 e0       	ldi	r18, 0x04	; 4
 42e:	23 27       	eor	r18, r19
 430:	fc 01       	movw	r30, r24
 432:	20 83       	st	Z, r18

00000434 <.L13>:

        }
    }
}
 434:	00 00       	nop
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	08 95       	ret

0000043c <setup>:


void setup()
{
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
 440:	cd b7       	in	r28, 0x3d	; 61
 442:	de b7       	in	r29, 0x3e	; 62

00000444 <.Loc.101>:
    // Leds
    DDRB |= (1 << PB7); // Led 1
 444:	84 e2       	ldi	r24, 0x24	; 36
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	fc 01       	movw	r30, r24
 44a:	20 81       	ld	r18, Z
 44c:	84 e2       	ldi	r24, 0x24	; 36
 44e:	90 e0       	ldi	r25, 0x00	; 0

00000450 <.Loc.102>:
 450:	20 68       	ori	r18, 0x80	; 128
 452:	fc 01       	movw	r30, r24
 454:	20 83       	st	Z, r18

00000456 <.Loc.103>:
    DDRB |= (1 << PB6); // Led 2
 456:	84 e2       	ldi	r24, 0x24	; 36
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	fc 01       	movw	r30, r24
 45c:	20 81       	ld	r18, Z
 45e:	84 e2       	ldi	r24, 0x24	; 36
 460:	90 e0       	ldi	r25, 0x00	; 0

00000462 <.Loc.104>:
 462:	20 64       	ori	r18, 0x40	; 64
 464:	fc 01       	movw	r30, r24
 466:	20 83       	st	Z, r18

00000468 <.Loc.105>:

    // Encoder inputs
    DDRB &= ~(1 << PB1); // A
 468:	84 e2       	ldi	r24, 0x24	; 36
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	fc 01       	movw	r30, r24
 46e:	20 81       	ld	r18, Z

00000470 <.Loc.106>:
 470:	84 e2       	ldi	r24, 0x24	; 36
 472:	90 e0       	ldi	r25, 0x00	; 0

00000474 <.Loc.107>:
 474:	2d 7f       	andi	r18, 0xFD	; 253
 476:	fc 01       	movw	r30, r24
 478:	20 83       	st	Z, r18

0000047a <.Loc.108>:
    DDRB &= ~(1 << PB3); // B
 47a:	84 e2       	ldi	r24, 0x24	; 36
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	fc 01       	movw	r30, r24
 480:	20 81       	ld	r18, Z

00000482 <.Loc.109>:
 482:	84 e2       	ldi	r24, 0x24	; 36
 484:	90 e0       	ldi	r25, 0x00	; 0

00000486 <.Loc.110>:
 486:	27 7f       	andi	r18, 0xF7	; 247
 488:	fc 01       	movw	r30, r24
 48a:	20 83       	st	Z, r18

0000048c <.Loc.111>:

    // Pull-up for encoder inputs
    PORTB |= (1 << PB1) | (1 << PB3);
 48c:	85 e2       	ldi	r24, 0x25	; 37
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	fc 01       	movw	r30, r24
 492:	20 81       	ld	r18, Z
 494:	85 e2       	ldi	r24, 0x25	; 37
 496:	90 e0       	ldi	r25, 0x00	; 0

00000498 <.Loc.112>:
 498:	2a 60       	ori	r18, 0x0A	; 10
 49a:	fc 01       	movw	r30, r24
 49c:	20 83       	st	Z, r18

0000049e <.Loc.113>:

    // Enable external interrupts for INT0 (PB1) and INT1 (PB3)
    EIMSK |= (1 << INT0) | (1 << INT1);
 49e:	8d e3       	ldi	r24, 0x3D	; 61
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	fc 01       	movw	r30, r24
 4a4:	20 81       	ld	r18, Z
 4a6:	8d e3       	ldi	r24, 0x3D	; 61
 4a8:	90 e0       	ldi	r25, 0x00	; 0

000004aa <.Loc.114>:
 4aa:	23 60       	ori	r18, 0x03	; 3
 4ac:	fc 01       	movw	r30, r24
 4ae:	20 83       	st	Z, r18

000004b0 <.Loc.115>:

    // Trigger interrupt on logical change
    MCUCR |= (1 << ISC01) | (1 << ISC11);
 4b0:	85 e5       	ldi	r24, 0x55	; 85
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	fc 01       	movw	r30, r24
 4b6:	20 81       	ld	r18, Z
 4b8:	85 e5       	ldi	r24, 0x55	; 85
 4ba:	90 e0       	ldi	r25, 0x00	; 0

000004bc <.Loc.116>:
 4bc:	2a 60       	ori	r18, 0x0A	; 10
 4be:	fc 01       	movw	r30, r24
 4c0:	20 83       	st	Z, r18

000004c2 <.Loc.117>:

    sei(); // Enable global interrupts
 4c2:	78 94       	sei

000004c4 <.Loc.118>:
}
 4c4:	00 00       	nop
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	08 95       	ret

000004cc <__vector_1>:

ISR(INT0_vect)
{
 4cc:	1f 92       	push	r1
 4ce:	0f 92       	push	r0
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	0f 92       	push	r0
 4d4:	11 24       	eor	r1, r1
 4d6:	0b b6       	in	r0, 0x3b	; 59
 4d8:	0f 92       	push	r0
 4da:	8f 93       	push	r24
 4dc:	9f 93       	push	r25
 4de:	ef 93       	push	r30
 4e0:	ff 93       	push	r31
 4e2:	cf 93       	push	r28
 4e4:	df 93       	push	r29
 4e6:	cd b7       	in	r28, 0x3d	; 61
 4e8:	de b7       	in	r29, 0x3e	; 62

000004ea <.Loc.120>:
    // Handle interrupt for A (PB1)
    if (bit_is_clear(PINB, PB1))
 4ea:	83 e2       	ldi	r24, 0x23	; 35
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	fc 01       	movw	r30, r24
 4f0:	80 81       	ld	r24, Z
 4f2:	88 2f       	mov	r24, r24
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	82 70       	andi	r24, 0x02	; 2
 4f8:	99 27       	eor	r25, r25

000004fa <.Loc.121>:
 4fa:	00 97       	sbiw	r24, 0x00	; 0
 4fc:	a9 f4       	brne	.+42     	; 0x528 <.L18>

000004fe <.Loc.122>:
    {
        if (bit_is_clear(PINB, PB3))
 4fe:	83 e2       	ldi	r24, 0x23	; 35
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	fc 01       	movw	r30, r24
 504:	80 81       	ld	r24, Z
 506:	88 2f       	mov	r24, r24
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	88 70       	andi	r24, 0x08	; 8
 50c:	99 27       	eor	r25, r25

0000050e <.Loc.123>:
 50e:	00 97       	sbiw	r24, 0x00	; 0
 510:	31 f4       	brne	.+12     	; 0x51e <.L17>

00000512 <.Loc.124>:
        {
            encoderValue++;
 512:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <encoderValue>
 516:	8f 5f       	subi	r24, 0xFF	; 255
 518:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <encoderValue>

0000051c <.Loc.125>:
        else
        {
            encoderValue--;
        }
    }
}
 51c:	05 c0       	rjmp	.+10     	; 0x528 <.L18>

0000051e <.L17>:
            encoderValue--;
 51e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <encoderValue>
 522:	81 50       	subi	r24, 0x01	; 1
 524:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <encoderValue>

00000528 <.L18>:
}
 528:	00 00       	nop
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	ff 91       	pop	r31
 530:	ef 91       	pop	r30
 532:	9f 91       	pop	r25
 534:	8f 91       	pop	r24
 536:	0f 90       	pop	r0
 538:	0b be       	out	0x3b, r0	; 59
 53a:	0f 90       	pop	r0
 53c:	0f be       	out	0x3f, r0	; 63
 53e:	0f 90       	pop	r0
 540:	1f 90       	pop	r1
 542:	18 95       	reti

00000544 <__vector_2>:

ISR(INT1_vect)
{
 544:	1f 92       	push	r1
 546:	0f 92       	push	r0
 548:	0f b6       	in	r0, 0x3f	; 63
 54a:	0f 92       	push	r0
 54c:	11 24       	eor	r1, r1
 54e:	0b b6       	in	r0, 0x3b	; 59
 550:	0f 92       	push	r0
 552:	8f 93       	push	r24
 554:	9f 93       	push	r25
 556:	ef 93       	push	r30
 558:	ff 93       	push	r31
 55a:	cf 93       	push	r28
 55c:	df 93       	push	r29
 55e:	cd b7       	in	r28, 0x3d	; 61
 560:	de b7       	in	r29, 0x3e	; 62

00000562 <.Loc.129>:
    // Handle interrupt for B (PB3)
    if (bit_is_clear(PINB, PB3))
 562:	83 e2       	ldi	r24, 0x23	; 35
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	fc 01       	movw	r30, r24
 568:	80 81       	ld	r24, Z
 56a:	88 2f       	mov	r24, r24
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	88 70       	andi	r24, 0x08	; 8
 570:	99 27       	eor	r25, r25

00000572 <.Loc.130>:
 572:	00 97       	sbiw	r24, 0x00	; 0
 574:	a9 f4       	brne	.+42     	; 0x5a0 <.L22>

00000576 <.Loc.131>:
    {
        if (bit_is_clear(PINB, PB1))
 576:	83 e2       	ldi	r24, 0x23	; 35
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	fc 01       	movw	r30, r24
 57c:	80 81       	ld	r24, Z
 57e:	88 2f       	mov	r24, r24
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	82 70       	andi	r24, 0x02	; 2
 584:	99 27       	eor	r25, r25

00000586 <.Loc.132>:
 586:	00 97       	sbiw	r24, 0x00	; 0
 588:	31 f4       	brne	.+12     	; 0x596 <.L21>

0000058a <.Loc.133>:
        {
            encoderValue--;
 58a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <encoderValue>
 58e:	81 50       	subi	r24, 0x01	; 1
 590:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <encoderValue>

00000594 <.Loc.134>:
        else
        {
            encoderValue++;
        }
    }
}
 594:	05 c0       	rjmp	.+10     	; 0x5a0 <.L22>

00000596 <.L21>:
            encoderValue++;
 596:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <encoderValue>
 59a:	8f 5f       	subi	r24, 0xFF	; 255
 59c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <encoderValue>

000005a0 <.L22>:
}
 5a0:	00 00       	nop
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	ff 91       	pop	r31
 5a8:	ef 91       	pop	r30
 5aa:	9f 91       	pop	r25
 5ac:	8f 91       	pop	r24
 5ae:	0f 90       	pop	r0
 5b0:	0b be       	out	0x3b, r0	; 59
 5b2:	0f 90       	pop	r0
 5b4:	0f be       	out	0x3f, r0	; 63
 5b6:	0f 90       	pop	r0
 5b8:	1f 90       	pop	r1
 5ba:	18 95       	reti

000005bc <main>:

int main(void)
{
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
 5c0:	cd b7       	in	r28, 0x3d	; 61
 5c2:	de b7       	in	r29, 0x3e	; 62

000005c4 <.Loc.138>:
    setup();
 5c4:	0e 94 1e 02 	call	0x43c	; 0x43c <setup>

000005c8 <.L24>:

    while (1)
    {
        //toggleRechts();
        //toggleLinks();
        beweegRechts();
 5c8:	0e 94 25 01 	call	0x24a	; 0x24a <beweegRechts>
 5cc:	fd cf       	rjmp	.-6      	; 0x5c8 <.L24>

000005ce <_exit>:
 5ce:	f8 94       	cli

000005d0 <__stop_program>:
 5d0:	ff cf       	rjmp	.-2      	; 0x5d0 <__stop_program>
