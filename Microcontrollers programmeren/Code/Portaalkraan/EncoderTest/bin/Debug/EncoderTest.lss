
bin\Debug\EncoderTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000672  00000726  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000672  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800200  00800200  00000726  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000726  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  00000729  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000073c  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 00000078  00000000  00000000  00000780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00000e36  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00000cd9  00000000  00000000  0000162e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   000003b5  00000000  00000000  00002307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  000000cc  00000000  00000000  000026bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00000566  00000000  00000000  00002788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 0000017d  00000000  00000000  00002cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_1>
   8:	0c 94 0c 01 	jmp	0x218	; 0x218 <__vector_2>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  bc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  cc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  dc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  e0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.Loc.5>

000000fc <.Loc.4>:
  fc:	1d 92       	st	X+, r1

000000fe <.Loc.5>:
  fe:	a1 30       	cpi	r26, 0x01	; 1

00000100 <.Loc.6>:
 100:	b2 07       	cpc	r27, r18

00000102 <.Loc.7>:
 102:	e1 f7       	brne	.-8      	; 0xfc <.Loc.4>

00000104 <L0^A>:
 104:	0e 94 48 01 	call	0x290	; 0x290 <main>
 108:	0c 94 37 03 	jmp	0x66e	; 0x66e <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <setup>:
#include <util/delay.h>

volatile int8_t encoderValue = 0;

void setup()
{
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62

00000118 <.Loc.1>:
    // Leds
    DDRB |= (1 << PB7); // Led 1
 118:	84 e2       	ldi	r24, 0x24	; 36
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	fc 01       	movw	r30, r24
 11e:	20 81       	ld	r18, Z
 120:	84 e2       	ldi	r24, 0x24	; 36
 122:	90 e0       	ldi	r25, 0x00	; 0

00000124 <.Loc.2>:
 124:	20 68       	ori	r18, 0x80	; 128
 126:	fc 01       	movw	r30, r24
 128:	20 83       	st	Z, r18

0000012a <.Loc.3>:
    DDRB |= (1 << PB6); // Led 2
 12a:	84 e2       	ldi	r24, 0x24	; 36
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	fc 01       	movw	r30, r24
 130:	20 81       	ld	r18, Z
 132:	84 e2       	ldi	r24, 0x24	; 36
 134:	90 e0       	ldi	r25, 0x00	; 0

00000136 <.Loc.4>:
 136:	20 64       	ori	r18, 0x40	; 64
 138:	fc 01       	movw	r30, r24
 13a:	20 83       	st	Z, r18

0000013c <.Loc.5>:

    // Encoder inputs
    DDRB &= ~(1 << PB1); // A
 13c:	84 e2       	ldi	r24, 0x24	; 36
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	fc 01       	movw	r30, r24
 142:	20 81       	ld	r18, Z

00000144 <.Loc.6>:
 144:	84 e2       	ldi	r24, 0x24	; 36
 146:	90 e0       	ldi	r25, 0x00	; 0

00000148 <.Loc.7>:
 148:	2d 7f       	andi	r18, 0xFD	; 253
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18

0000014e <.Loc.8>:
    DDRB &= ~(1 << PB3); // B
 14e:	84 e2       	ldi	r24, 0x24	; 36
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	fc 01       	movw	r30, r24
 154:	20 81       	ld	r18, Z

00000156 <.Loc.9>:
 156:	84 e2       	ldi	r24, 0x24	; 36
 158:	90 e0       	ldi	r25, 0x00	; 0

0000015a <.Loc.10>:
 15a:	27 7f       	andi	r18, 0xF7	; 247
 15c:	fc 01       	movw	r30, r24
 15e:	20 83       	st	Z, r18

00000160 <.Loc.11>:

    // Pull-up for encoder inputs
    PORTB |= (1 << PB1) | (1 << PB3);
 160:	85 e2       	ldi	r24, 0x25	; 37
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	fc 01       	movw	r30, r24
 166:	20 81       	ld	r18, Z
 168:	85 e2       	ldi	r24, 0x25	; 37
 16a:	90 e0       	ldi	r25, 0x00	; 0

0000016c <.Loc.12>:
 16c:	2a 60       	ori	r18, 0x0A	; 10
 16e:	fc 01       	movw	r30, r24
 170:	20 83       	st	Z, r18

00000172 <.Loc.13>:

    // Enable external interrupts for INT0 (PB1) and INT1 (PB3)
    EIMSK |= (1 << INT0) | (1 << INT1);
 172:	8d e3       	ldi	r24, 0x3D	; 61
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	fc 01       	movw	r30, r24
 178:	20 81       	ld	r18, Z
 17a:	8d e3       	ldi	r24, 0x3D	; 61
 17c:	90 e0       	ldi	r25, 0x00	; 0

0000017e <.Loc.14>:
 17e:	23 60       	ori	r18, 0x03	; 3
 180:	fc 01       	movw	r30, r24
 182:	20 83       	st	Z, r18

00000184 <.Loc.15>:

    // Trigger interrupt on logical change
    MCUCR |= (1 << ISC01) | (1 << ISC11);
 184:	85 e5       	ldi	r24, 0x55	; 85
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	fc 01       	movw	r30, r24
 18a:	20 81       	ld	r18, Z
 18c:	85 e5       	ldi	r24, 0x55	; 85
 18e:	90 e0       	ldi	r25, 0x00	; 0

00000190 <.Loc.16>:
 190:	2a 60       	ori	r18, 0x0A	; 10
 192:	fc 01       	movw	r30, r24
 194:	20 83       	st	Z, r18

00000196 <.Loc.17>:

    sei(); // Enable global interrupts
 196:	78 94       	sei

00000198 <.Loc.18>:
}
 198:	00 00       	nop
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <__vector_1>:

ISR(INT0_vect)
{
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	0b b6       	in	r0, 0x3b	; 59
 1ac:	0f 92       	push	r0
 1ae:	8f 93       	push	r24
 1b0:	9f 93       	push	r25
 1b2:	ef 93       	push	r30
 1b4:	ff 93       	push	r31
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62

000001be <.Loc.20>:
    // Handle interrupt for A (PB1)
    if (bit_is_clear(PINB, PB1))
 1be:	83 e2       	ldi	r24, 0x23	; 35
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	fc 01       	movw	r30, r24
 1c4:	80 81       	ld	r24, Z
 1c6:	88 2f       	mov	r24, r24
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	82 70       	andi	r24, 0x02	; 2
 1cc:	99 27       	eor	r25, r25

000001ce <.Loc.21>:
 1ce:	00 97       	sbiw	r24, 0x00	; 0
 1d0:	a9 f4       	brne	.+42     	; 0x1fc <.L5>

000001d2 <.Loc.22>:
    {
        if (bit_is_clear(PINB, PB3))
 1d2:	83 e2       	ldi	r24, 0x23	; 35
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	fc 01       	movw	r30, r24
 1d8:	80 81       	ld	r24, Z
 1da:	88 2f       	mov	r24, r24
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	88 70       	andi	r24, 0x08	; 8
 1e0:	99 27       	eor	r25, r25

000001e2 <.Loc.23>:
 1e2:	00 97       	sbiw	r24, 0x00	; 0
 1e4:	31 f4       	brne	.+12     	; 0x1f2 <.L4>

000001e6 <.Loc.24>:
        {
            encoderValue++;
 1e6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <encoderValue>
 1ea:	8f 5f       	subi	r24, 0xFF	; 255
 1ec:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <encoderValue>

000001f0 <.Loc.25>:
        else
        {
            encoderValue--;
        }
    }
}
 1f0:	05 c0       	rjmp	.+10     	; 0x1fc <.L5>

000001f2 <.L4>:
            encoderValue--;
 1f2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <encoderValue>
 1f6:	81 50       	subi	r24, 0x01	; 1
 1f8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <encoderValue>

000001fc <.L5>:
}
 1fc:	00 00       	nop
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	ff 91       	pop	r31
 204:	ef 91       	pop	r30
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	0f 90       	pop	r0
 20c:	0b be       	out	0x3b, r0	; 59
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <__vector_2>:

ISR(INT1_vect)
{
 218:	1f 92       	push	r1
 21a:	0f 92       	push	r0
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	0f 92       	push	r0
 220:	11 24       	eor	r1, r1
 222:	0b b6       	in	r0, 0x3b	; 59
 224:	0f 92       	push	r0
 226:	8f 93       	push	r24
 228:	9f 93       	push	r25
 22a:	ef 93       	push	r30
 22c:	ff 93       	push	r31
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	cd b7       	in	r28, 0x3d	; 61
 234:	de b7       	in	r29, 0x3e	; 62

00000236 <.Loc.29>:
    // Handle interrupt for B (PB3)
    if (bit_is_clear(PINB, PB3))
 236:	83 e2       	ldi	r24, 0x23	; 35
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	fc 01       	movw	r30, r24
 23c:	80 81       	ld	r24, Z
 23e:	88 2f       	mov	r24, r24
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	88 70       	andi	r24, 0x08	; 8
 244:	99 27       	eor	r25, r25

00000246 <.Loc.30>:
 246:	00 97       	sbiw	r24, 0x00	; 0
 248:	a9 f4       	brne	.+42     	; 0x274 <.L9>

0000024a <.Loc.31>:
    {
        if (bit_is_clear(PINB, PB1))
 24a:	83 e2       	ldi	r24, 0x23	; 35
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	fc 01       	movw	r30, r24
 250:	80 81       	ld	r24, Z
 252:	88 2f       	mov	r24, r24
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	82 70       	andi	r24, 0x02	; 2
 258:	99 27       	eor	r25, r25

0000025a <.Loc.32>:
 25a:	00 97       	sbiw	r24, 0x00	; 0
 25c:	31 f4       	brne	.+12     	; 0x26a <.L8>

0000025e <.Loc.33>:
        {
            encoderValue--;
 25e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <encoderValue>
 262:	81 50       	subi	r24, 0x01	; 1
 264:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <encoderValue>

00000268 <.Loc.34>:
        else
        {
            encoderValue++;
        }
    }
}
 268:	05 c0       	rjmp	.+10     	; 0x274 <.L9>

0000026a <.L8>:
            encoderValue++;
 26a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <encoderValue>
 26e:	8f 5f       	subi	r24, 0xFF	; 255
 270:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <encoderValue>

00000274 <.L9>:
}
 274:	00 00       	nop
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	ff 91       	pop	r31
 27c:	ef 91       	pop	r30
 27e:	9f 91       	pop	r25
 280:	8f 91       	pop	r24
 282:	0f 90       	pop	r0
 284:	0b be       	out	0x3b, r0	; 59
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <main>:

int main(void)
{
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	cd b7       	in	r28, 0x3d	; 61
 296:	de b7       	in	r29, 0x3e	; 62
 298:	a2 97       	sbiw	r28, 0x22	; 34
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	f8 94       	cli
 29e:	de bf       	out	0x3e, r29	; 62
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	cd bf       	out	0x3d, r28	; 61

000002a4 <.Loc.38>:
    setup();
 2a4:	0e 94 88 00 	call	0x110	; 0x110 <setup>

000002a8 <.L22>:

    while (1)
    {
        // Handle encoder value and control LEDs accordingly
        if (encoderValue > 0)
 2a8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <encoderValue>

000002ac <.Loc.40>:
 2ac:	88 23       	and	r24, r24
 2ae:	a1 f0       	breq	.+40     	; 0x2d8 <.L11>
 2b0:	9c f0       	brlt	.+38     	; 0x2d8 <.L11>

000002b2 <.Loc.41>:
        {
            PORTB |= (1 << PB7);
 2b2:	85 e2       	ldi	r24, 0x25	; 37
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	dc 01       	movw	r26, r24
 2b8:	2c 91       	ld	r18, X
 2ba:	85 e2       	ldi	r24, 0x25	; 37
 2bc:	90 e0       	ldi	r25, 0x00	; 0

000002be <.Loc.42>:
 2be:	20 68       	ori	r18, 0x80	; 128
 2c0:	fc 01       	movw	r30, r24
 2c2:	20 83       	st	Z, r18

000002c4 <.Loc.43>:
            PORTB &= ~(1 << PB6);
 2c4:	85 e2       	ldi	r24, 0x25	; 37
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	dc 01       	movw	r26, r24
 2ca:	2c 91       	ld	r18, X

000002cc <.Loc.44>:
 2cc:	85 e2       	ldi	r24, 0x25	; 37
 2ce:	90 e0       	ldi	r25, 0x00	; 0

000002d0 <.Loc.45>:
 2d0:	2f 7b       	andi	r18, 0xBF	; 191
 2d2:	fc 01       	movw	r30, r24
 2d4:	20 83       	st	Z, r18
 2d6:	20 c0       	rjmp	.+64     	; 0x318 <.L12>

000002d8 <.L11>:
        }
        else if (encoderValue < 0)
 2d8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <encoderValue>

000002dc <.Loc.47>:
 2dc:	88 23       	and	r24, r24
 2de:	9c f4       	brge	.+38     	; 0x306 <.L13>

000002e0 <.Loc.48>:
        {
            PORTB |= (1 << PB6);
 2e0:	85 e2       	ldi	r24, 0x25	; 37
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	dc 01       	movw	r26, r24
 2e6:	2c 91       	ld	r18, X
 2e8:	85 e2       	ldi	r24, 0x25	; 37
 2ea:	90 e0       	ldi	r25, 0x00	; 0

000002ec <.Loc.49>:
 2ec:	20 64       	ori	r18, 0x40	; 64
 2ee:	fc 01       	movw	r30, r24
 2f0:	20 83       	st	Z, r18

000002f2 <.Loc.50>:
            PORTB &= ~(1 << PB7);
 2f2:	85 e2       	ldi	r24, 0x25	; 37
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	dc 01       	movw	r26, r24
 2f8:	2c 91       	ld	r18, X

000002fa <.Loc.51>:
 2fa:	85 e2       	ldi	r24, 0x25	; 37
 2fc:	90 e0       	ldi	r25, 0x00	; 0

000002fe <.Loc.52>:
 2fe:	2f 77       	andi	r18, 0x7F	; 127
 300:	fc 01       	movw	r30, r24
 302:	20 83       	st	Z, r18
 304:	09 c0       	rjmp	.+18     	; 0x318 <.L12>

00000306 <.L13>:
        }
        else
        {
            // Encoder value is zero, turn off both LEDs
            PORTB &= ~(1 << PB6) & ~(1 << PB7);
 306:	85 e2       	ldi	r24, 0x25	; 37
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	dc 01       	movw	r26, r24
 30c:	2c 91       	ld	r18, X

0000030e <.Loc.54>:
 30e:	85 e2       	ldi	r24, 0x25	; 37
 310:	90 e0       	ldi	r25, 0x00	; 0

00000312 <.Loc.55>:
 312:	2f 73       	andi	r18, 0x3F	; 63
 314:	fc 01       	movw	r30, r24
 316:	20 83       	st	Z, r18

00000318 <.L12>:
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	a0 e2       	ldi	r26, 0x20	; 32
 31e:	b1 e4       	ldi	r27, 0x41	; 65
 320:	89 83       	std	Y+1, r24	; 0x01
 322:	9a 83       	std	Y+2, r25	; 0x02
 324:	ab 83       	std	Y+3, r26	; 0x03
 326:	bc 83       	std	Y+4, r27	; 0x04

00000328 <.LBB12>:

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 328:	20 e0       	ldi	r18, 0x00	; 0
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	4a e7       	ldi	r20, 0x7A	; 122
 32e:	55 e4       	ldi	r21, 0x45	; 69
 330:	69 81       	ldd	r22, Y+1	; 0x01
 332:	7a 81       	ldd	r23, Y+2	; 0x02
 334:	8b 81       	ldd	r24, Y+3	; 0x03
 336:	9c 81       	ldd	r25, Y+4	; 0x04
 338:	0e 94 a2 02 	call	0x544	; 0x544 <__mulsf3>
 33c:	6b 8b       	std	Y+19, r22	; 0x13
 33e:	7c 8b       	std	Y+20, r23	; 0x14
 340:	8d 8b       	std	Y+21, r24	; 0x15
 342:	9e 8b       	std	Y+22, r25	; 0x16
 344:	8b 89       	ldd	r24, Y+19	; 0x13
 346:	9c 89       	ldd	r25, Y+20	; 0x14
 348:	ad 89       	ldd	r26, Y+21	; 0x15
 34a:	be 89       	ldd	r27, Y+22	; 0x16
 34c:	8d 83       	std	Y+5, r24	; 0x05
 34e:	9e 83       	std	Y+6, r25	; 0x06
 350:	af 83       	std	Y+7, r26	; 0x07
 352:	b8 87       	std	Y+8, r27	; 0x08

00000354 <.Loc.57>:
	if (__tmp < 1.0)
 354:	20 e0       	ldi	r18, 0x00	; 0
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	40 e8       	ldi	r20, 0x80	; 128
 35a:	5f e3       	ldi	r21, 0x3F	; 63
 35c:	6d 81       	ldd	r22, Y+5	; 0x05
 35e:	7e 81       	ldd	r23, Y+6	; 0x06
 360:	8f 81       	ldd	r24, Y+7	; 0x07
 362:	98 85       	ldd	r25, Y+8	; 0x08
 364:	0e 94 1c 02 	call	0x438	; 0x438 <__cmpsf2>
 368:	88 23       	and	r24, r24
 36a:	2c f4       	brge	.+10     	; 0x376 <.L25>

0000036c <.Loc.58>:
		__ticks = 1;
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	9a 87       	std	Y+10, r25	; 0x0a
 372:	89 87       	std	Y+9, r24	; 0x09
 374:	55 c0       	rjmp	.+170    	; 0x420 <.L16>

00000376 <.L25>:
	else if (__tmp > 65535)
 376:	20 e0       	ldi	r18, 0x00	; 0
 378:	3f ef       	ldi	r19, 0xFF	; 255
 37a:	4f e7       	ldi	r20, 0x7F	; 127
 37c:	57 e4       	ldi	r21, 0x47	; 71
 37e:	6d 81       	ldd	r22, Y+5	; 0x05
 380:	7e 81       	ldd	r23, Y+6	; 0x06
 382:	8f 81       	ldd	r24, Y+7	; 0x07
 384:	98 85       	ldd	r25, Y+8	; 0x08
 386:	0e 94 9d 02 	call	0x53a	; 0x53a <__gesf2>
 38a:	88 23       	and	r24, r24
 38c:	d9 f1       	breq	.+118    	; 0x404 <.L26>
 38e:	d4 f1       	brlt	.+116    	; 0x404 <.L26>

00000390 <.Loc.60>:
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 390:	20 e0       	ldi	r18, 0x00	; 0
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	40 e2       	ldi	r20, 0x20	; 32
 396:	51 e4       	ldi	r21, 0x41	; 65
 398:	69 81       	ldd	r22, Y+1	; 0x01
 39a:	7a 81       	ldd	r23, Y+2	; 0x02
 39c:	8b 81       	ldd	r24, Y+3	; 0x03
 39e:	9c 81       	ldd	r25, Y+4	; 0x04
 3a0:	0e 94 a2 02 	call	0x544	; 0x544 <__mulsf3>
 3a4:	6f 8b       	std	Y+23, r22	; 0x17
 3a6:	78 8f       	std	Y+24, r23	; 0x18
 3a8:	89 8f       	std	Y+25, r24	; 0x19
 3aa:	9a 8f       	std	Y+26, r25	; 0x1a
 3ac:	8f 89       	ldd	r24, Y+23	; 0x17
 3ae:	98 8d       	ldd	r25, Y+24	; 0x18
 3b0:	a9 8d       	ldd	r26, Y+25	; 0x19
 3b2:	ba 8d       	ldd	r27, Y+26	; 0x1a
 3b4:	8f 87       	std	Y+15, r24	; 0x0f
 3b6:	98 8b       	std	Y+16, r25	; 0x10
 3b8:	a9 8b       	std	Y+17, r26	; 0x11
 3ba:	ba 8b       	std	Y+18, r27	; 0x12

000003bc <.Loc.61>:
 3bc:	6f 85       	ldd	r22, Y+15	; 0x0f
 3be:	78 89       	ldd	r23, Y+16	; 0x10
 3c0:	89 89       	ldd	r24, Y+17	; 0x11
 3c2:	9a 89       	ldd	r25, Y+18	; 0x12
 3c4:	0e 94 21 02 	call	0x442	; 0x442 <__fixunssfsi>
 3c8:	6b 8f       	std	Y+27, r22	; 0x1b
 3ca:	7c 8f       	std	Y+28, r23	; 0x1c
 3cc:	8d 8f       	std	Y+29, r24	; 0x1d
 3ce:	9e 8f       	std	Y+30, r25	; 0x1e
 3d0:	ab 8d       	ldd	r26, Y+27	; 0x1b
 3d2:	bc 8d       	ldd	r27, Y+28	; 0x1c
 3d4:	ba 87       	std	Y+10, r27	; 0x0a
 3d6:	a9 87       	std	Y+9, r26	; 0x09

000003d8 <.Loc.62>:
		while(__ticks)
 3d8:	10 c0       	rjmp	.+32     	; 0x3fa <.L19>

000003da <.L20>:
 3da:	80 e9       	ldi	r24, 0x90	; 144
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	9c 87       	std	Y+12, r25	; 0x0c
 3e0:	8b 87       	std	Y+11, r24	; 0x0b

000003e2 <.LBB14>:
		"sbc %B0,__zero_reg__"    "\n\t"
		"brne 1b"
		: "+d" (__count)
	);
#else
	__asm__ volatile (
 3e2:	8b 85       	ldd	r24, Y+11	; 0x0b
 3e4:	9c 85       	ldd	r25, Y+12	; 0x0c

000003e6 <.L1^B1>:
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <.L1^B1>
 3ea:	9c 87       	std	Y+12, r25	; 0x0c
 3ec:	8b 87       	std	Y+11, r24	; 0x0b

000003ee <.Loc.64>:
	...

000003f0 <.LBE14>:
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3f0:	89 85       	ldd	r24, Y+9	; 0x09
 3f2:	9a 85       	ldd	r25, Y+10	; 0x0a
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	9a 87       	std	Y+10, r25	; 0x0a
 3f8:	89 87       	std	Y+9, r24	; 0x09

000003fa <.L19>:
		while(__ticks)
 3fa:	89 85       	ldd	r24, Y+9	; 0x09
 3fc:	9a 85       	ldd	r25, Y+10	; 0x0a
 3fe:	00 97       	sbiw	r24, 0x00	; 0
 400:	61 f7       	brne	.-40     	; 0x3da <.L20>

00000402 <.Loc.67>:
		}
		return;
 402:	19 c0       	rjmp	.+50     	; 0x436 <.L21>

00000404 <.L26>:
	}
	else
		__ticks = (uint16_t)__tmp;
 404:	6d 81       	ldd	r22, Y+5	; 0x05
 406:	7e 81       	ldd	r23, Y+6	; 0x06
 408:	8f 81       	ldd	r24, Y+7	; 0x07
 40a:	98 85       	ldd	r25, Y+8	; 0x08
 40c:	0e 94 21 02 	call	0x442	; 0x442 <__fixunssfsi>
 410:	6f 8f       	std	Y+31, r22	; 0x1f
 412:	78 a3       	std	Y+32, r23	; 0x20
 414:	89 a3       	std	Y+33, r24	; 0x21
 416:	9a a3       	std	Y+34, r25	; 0x22
 418:	ef 8d       	ldd	r30, Y+31	; 0x1f
 41a:	f8 a1       	ldd	r31, Y+32	; 0x20
 41c:	fa 87       	std	Y+10, r31	; 0x0a
 41e:	e9 87       	std	Y+9, r30	; 0x09

00000420 <.L16>:
 420:	89 85       	ldd	r24, Y+9	; 0x09
 422:	9a 85       	ldd	r25, Y+10	; 0x0a
 424:	9e 87       	std	Y+14, r25	; 0x0e
 426:	8d 87       	std	Y+13, r24	; 0x0d

00000428 <.LBB16>:
 428:	8d 85       	ldd	r24, Y+13	; 0x0d
 42a:	9e 85       	ldd	r25, Y+14	; 0x0e

0000042c <.L1^B2>:
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <.L1^B2>
 430:	9e 87       	std	Y+14, r25	; 0x0e
 432:	8d 87       	std	Y+13, r24	; 0x0d

00000434 <.Loc.70>:
	...

00000436 <.L21>:
        if (encoderValue > 0)
 436:	38 cf       	rjmp	.-400    	; 0x2a8 <.L22>

00000438 <__cmpsf2>:
 438:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__fp_cmp>
 43c:	08 f4       	brcc	.+2      	; 0x440 <.L1^B1>
 43e:	81 e0       	ldi	r24, 0x01	; 1

00000440 <.L1^B1>:
 440:	08 95       	ret

00000442 <__fixunssfsi>:
 442:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <__fp_splitA>
 446:	88 f0       	brcs	.+34     	; 0x46a <.L_err>
 448:	9f 57       	subi	r25, 0x7F	; 127
 44a:	98 f0       	brcs	.+38     	; 0x472 <.L_zr>
 44c:	b9 2f       	mov	r27, r25
 44e:	99 27       	eor	r25, r25
 450:	b7 51       	subi	r27, 0x17	; 23
 452:	b0 f0       	brcs	.+44     	; 0x480 <.L4^B1>
 454:	e1 f0       	breq	.+56     	; 0x48e <.L_sign>

00000456 <.L1^B1>:
 456:	66 0f       	add	r22, r22
 458:	77 1f       	adc	r23, r23
 45a:	88 1f       	adc	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	1a f0       	brmi	.+6      	; 0x466 <.L2^B1>
 460:	ba 95       	dec	r27
 462:	c9 f7       	brne	.-14     	; 0x456 <.L1^B1>
 464:	14 c0       	rjmp	.+40     	; 0x48e <.L_sign>

00000466 <.L2^B1>:
 466:	b1 30       	cpi	r27, 0x01	; 1
 468:	91 f0       	breq	.+36     	; 0x48e <.L_sign>

0000046a <.L_err>:
 46a:	0e 94 96 02 	call	0x52c	; 0x52c <__fp_zero>
 46e:	b1 e0       	ldi	r27, 0x01	; 1
 470:	08 95       	ret

00000472 <.L_zr>:
 472:	0c 94 96 02 	jmp	0x52c	; 0x52c <__fp_zero>

00000476 <.L3^B1>:
 476:	67 2f       	mov	r22, r23
 478:	78 2f       	mov	r23, r24
 47a:	88 27       	eor	r24, r24
 47c:	b8 5f       	subi	r27, 0xF8	; 248
 47e:	39 f0       	breq	.+14     	; 0x48e <.L_sign>

00000480 <.L4^B1>:
 480:	b9 3f       	cpi	r27, 0xF9	; 249
 482:	cc f3       	brlt	.-14     	; 0x476 <.L3^B1>

00000484 <.L5^B1>:
 484:	86 95       	lsr	r24
 486:	77 95       	ror	r23
 488:	67 95       	ror	r22
 48a:	b3 95       	inc	r27
 48c:	d9 f7       	brne	.-10     	; 0x484 <.L5^B1>

0000048e <.L_sign>:
 48e:	3e f4       	brtc	.+14     	; 0x49e <.L6^B1>
 490:	90 95       	com	r25
 492:	80 95       	com	r24
 494:	70 95       	com	r23
 496:	61 95       	neg	r22
 498:	7f 4f       	sbci	r23, 0xFF	; 255
 49a:	8f 4f       	sbci	r24, 0xFF	; 255
 49c:	9f 4f       	sbci	r25, 0xFF	; 255

0000049e <.L6^B1>:
 49e:	08 95       	ret

000004a0 <__fp_cmp>:
 4a0:	99 0f       	add	r25, r25
 4a2:	00 08       	sbc	r0, r0
 4a4:	55 0f       	add	r21, r21
 4a6:	aa 0b       	sbc	r26, r26
 4a8:	e0 e8       	ldi	r30, 0x80	; 128
 4aa:	fe ef       	ldi	r31, 0xFE	; 254
 4ac:	16 16       	cp	r1, r22
 4ae:	17 06       	cpc	r1, r23
 4b0:	e8 07       	cpc	r30, r24
 4b2:	f9 07       	cpc	r31, r25
 4b4:	c0 f0       	brcs	.+48     	; 0x4e6 <.L9^B1>
 4b6:	12 16       	cp	r1, r18
 4b8:	13 06       	cpc	r1, r19
 4ba:	e4 07       	cpc	r30, r20
 4bc:	f5 07       	cpc	r31, r21
 4be:	98 f0       	brcs	.+38     	; 0x4e6 <.L9^B1>
 4c0:	62 1b       	sub	r22, r18
 4c2:	73 0b       	sbc	r23, r19
 4c4:	84 0b       	sbc	r24, r20
 4c6:	95 0b       	sbc	r25, r21
 4c8:	39 f4       	brne	.+14     	; 0x4d8 <.L1^B1>
 4ca:	0a 26       	eor	r0, r26
 4cc:	61 f0       	breq	.+24     	; 0x4e6 <.L9^B1>
 4ce:	23 2b       	or	r18, r19
 4d0:	24 2b       	or	r18, r20
 4d2:	25 2b       	or	r18, r21
 4d4:	21 f4       	brne	.+8      	; 0x4de <.L2^B1>
 4d6:	08 95       	ret

000004d8 <.L1^B1>:
 4d8:	0a 26       	eor	r0, r26
 4da:	09 f4       	brne	.+2      	; 0x4de <.L2^B1>
 4dc:	a1 40       	sbci	r26, 0x01	; 1

000004de <.L2^B1>:
 4de:	a6 95       	lsr	r26
 4e0:	8f ef       	ldi	r24, 0xFF	; 255
 4e2:	81 1d       	adc	r24, r1
 4e4:	81 1d       	adc	r24, r1

000004e6 <.L9^B1>:
 4e6:	08 95       	ret

000004e8 <__fp_split3>:
 4e8:	57 fd       	sbrc	r21, 7
 4ea:	90 58       	subi	r25, 0x80	; 128
 4ec:	44 0f       	add	r20, r20
 4ee:	55 1f       	adc	r21, r21
 4f0:	59 f0       	breq	.+22     	; 0x508 <.L4^B1>
 4f2:	5f 3f       	cpi	r21, 0xFF	; 255
 4f4:	71 f0       	breq	.+28     	; 0x512 <.L5^B1>

000004f6 <.L1^B1>:
 4f6:	47 95       	ror	r20

000004f8 <__fp_splitA>:
 4f8:	88 0f       	add	r24, r24
 4fa:	97 fb       	bst	r25, 7
 4fc:	99 1f       	adc	r25, r25
 4fe:	61 f0       	breq	.+24     	; 0x518 <.L6^B1>
 500:	9f 3f       	cpi	r25, 0xFF	; 255
 502:	79 f0       	breq	.+30     	; 0x522 <.L7^B1>

00000504 <.L3^B1>:
 504:	87 95       	ror	r24
 506:	08 95       	ret

00000508 <.L4^B1>:
 508:	12 16       	cp	r1, r18
 50a:	13 06       	cpc	r1, r19
 50c:	14 06       	cpc	r1, r20
 50e:	55 1f       	adc	r21, r21
 510:	f2 cf       	rjmp	.-28     	; 0x4f6 <.L1^B1>

00000512 <.L5^B1>:
 512:	46 95       	lsr	r20
 514:	f1 df       	rcall	.-30     	; 0x4f8 <__fp_splitA>
 516:	08 c0       	rjmp	.+16     	; 0x528 <.L8^B1>

00000518 <.L6^B1>:
 518:	16 16       	cp	r1, r22
 51a:	17 06       	cpc	r1, r23
 51c:	18 06       	cpc	r1, r24
 51e:	99 1f       	adc	r25, r25
 520:	f1 cf       	rjmp	.-30     	; 0x504 <.L3^B1>

00000522 <.L7^B1>:
 522:	86 95       	lsr	r24
 524:	71 05       	cpc	r23, r1
 526:	61 05       	cpc	r22, r1

00000528 <.L8^B1>:
 528:	08 94       	sec
 52a:	08 95       	ret

0000052c <__fp_zero>:
 52c:	e8 94       	clt

0000052e <__fp_szero>:
 52e:	bb 27       	eor	r27, r27
 530:	66 27       	eor	r22, r22
 532:	77 27       	eor	r23, r23
 534:	cb 01       	movw	r24, r22
 536:	97 f9       	bld	r25, 7
 538:	08 95       	ret

0000053a <__gesf2>:
 53a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__fp_cmp>
 53e:	08 f4       	brcc	.+2      	; 0x542 <.L1^B1>
 540:	8f ef       	ldi	r24, 0xFF	; 255

00000542 <.L1^B1>:
 542:	08 95       	ret

00000544 <__mulsf3>:
 544:	0e 94 b5 02 	call	0x56a	; 0x56a <__mulsf3x>
 548:	0c 94 26 03 	jmp	0x64c	; 0x64c <__fp_round>

0000054c <.L^B1>:
 54c:	0e 94 18 03 	call	0x630	; 0x630 <__fp_pscA>
 550:	38 f0       	brcs	.+14     	; 0x560 <.L1^B1>
 552:	0e 94 1f 03 	call	0x63e	; 0x63e <__fp_pscB>
 556:	20 f0       	brcs	.+8      	; 0x560 <.L1^B1>
 558:	95 23       	and	r25, r21
 55a:	11 f0       	breq	.+4      	; 0x560 <.L1^B1>
 55c:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__fp_inf>

00000560 <.L1^B1>:
 560:	0c 94 15 03 	jmp	0x62a	; 0x62a <__fp_nan>

00000564 <.L2^B1>:
 564:	11 24       	eor	r1, r1
 566:	0c 94 97 02 	jmp	0x52e	; 0x52e <__fp_szero>

0000056a <__mulsf3x>:
 56a:	0e 94 74 02 	call	0x4e8	; 0x4e8 <__fp_split3>
 56e:	70 f3       	brcs	.-36     	; 0x54c <.L^B1>

00000570 <__mulsf3_pse>:
 570:	95 9f       	mul	r25, r21
 572:	c1 f3       	breq	.-16     	; 0x564 <.L2^B1>
 574:	95 0f       	add	r25, r21
 576:	50 e0       	ldi	r21, 0x00	; 0
 578:	55 1f       	adc	r21, r21
 57a:	62 9f       	mul	r22, r18
 57c:	f0 01       	movw	r30, r0
 57e:	72 9f       	mul	r23, r18
 580:	bb 27       	eor	r27, r27
 582:	f0 0d       	add	r31, r0
 584:	b1 1d       	adc	r27, r1
 586:	63 9f       	mul	r22, r19
 588:	aa 27       	eor	r26, r26
 58a:	f0 0d       	add	r31, r0
 58c:	b1 1d       	adc	r27, r1
 58e:	aa 1f       	adc	r26, r26
 590:	64 9f       	mul	r22, r20
 592:	66 27       	eor	r22, r22
 594:	b0 0d       	add	r27, r0
 596:	a1 1d       	adc	r26, r1
 598:	66 1f       	adc	r22, r22
 59a:	82 9f       	mul	r24, r18
 59c:	22 27       	eor	r18, r18
 59e:	b0 0d       	add	r27, r0
 5a0:	a1 1d       	adc	r26, r1
 5a2:	62 1f       	adc	r22, r18
 5a4:	73 9f       	mul	r23, r19
 5a6:	b0 0d       	add	r27, r0
 5a8:	a1 1d       	adc	r26, r1
 5aa:	62 1f       	adc	r22, r18
 5ac:	83 9f       	mul	r24, r19
 5ae:	a0 0d       	add	r26, r0
 5b0:	61 1d       	adc	r22, r1
 5b2:	22 1f       	adc	r18, r18
 5b4:	74 9f       	mul	r23, r20
 5b6:	33 27       	eor	r19, r19
 5b8:	a0 0d       	add	r26, r0
 5ba:	61 1d       	adc	r22, r1
 5bc:	23 1f       	adc	r18, r19
 5be:	84 9f       	mul	r24, r20
 5c0:	60 0d       	add	r22, r0
 5c2:	21 1d       	adc	r18, r1
 5c4:	82 2f       	mov	r24, r18
 5c6:	76 2f       	mov	r23, r22
 5c8:	6a 2f       	mov	r22, r26
 5ca:	11 24       	eor	r1, r1
 5cc:	9f 57       	subi	r25, 0x7F	; 127
 5ce:	50 40       	sbci	r21, 0x00	; 0
 5d0:	9a f0       	brmi	.+38     	; 0x5f8 <.L13^B1>
 5d2:	f1 f0       	breq	.+60     	; 0x610 <.L15^B1>

000005d4 <.L10^B1>:
 5d4:	88 23       	and	r24, r24
 5d6:	4a f0       	brmi	.+18     	; 0x5ea <.L11^B1>
 5d8:	ee 0f       	add	r30, r30
 5da:	ff 1f       	adc	r31, r31
 5dc:	bb 1f       	adc	r27, r27
 5de:	66 1f       	adc	r22, r22
 5e0:	77 1f       	adc	r23, r23
 5e2:	88 1f       	adc	r24, r24
 5e4:	91 50       	subi	r25, 0x01	; 1
 5e6:	50 40       	sbci	r21, 0x00	; 0
 5e8:	a9 f7       	brne	.-22     	; 0x5d4 <.L10^B1>

000005ea <.L11^B1>:
 5ea:	9e 3f       	cpi	r25, 0xFE	; 254
 5ec:	51 05       	cpc	r21, r1
 5ee:	80 f0       	brcs	.+32     	; 0x610 <.L15^B1>
 5f0:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__fp_inf>

000005f4 <.L12^B1>:
 5f4:	0c 94 97 02 	jmp	0x52e	; 0x52e <__fp_szero>

000005f8 <.L13^B1>:
 5f8:	5f 3f       	cpi	r21, 0xFF	; 255
 5fa:	e4 f3       	brlt	.-8      	; 0x5f4 <.L12^B1>
 5fc:	98 3e       	cpi	r25, 0xE8	; 232
 5fe:	d4 f3       	brlt	.-12     	; 0x5f4 <.L12^B1>

00000600 <.L14^B1>:
 600:	86 95       	lsr	r24
 602:	77 95       	ror	r23
 604:	67 95       	ror	r22
 606:	b7 95       	ror	r27
 608:	f7 95       	ror	r31
 60a:	e7 95       	ror	r30
 60c:	9f 5f       	subi	r25, 0xFF	; 255
 60e:	c1 f7       	brne	.-16     	; 0x600 <.L14^B1>

00000610 <.L15^B1>:
 610:	fe 2b       	or	r31, r30
 612:	88 0f       	add	r24, r24
 614:	91 1d       	adc	r25, r1
 616:	96 95       	lsr	r25
 618:	87 95       	ror	r24
 61a:	97 f9       	bld	r25, 7
 61c:	08 95       	ret

0000061e <__fp_inf>:
 61e:	97 f9       	bld	r25, 7
 620:	9f 67       	ori	r25, 0x7F	; 127
 622:	80 e8       	ldi	r24, 0x80	; 128
 624:	70 e0       	ldi	r23, 0x00	; 0
 626:	60 e0       	ldi	r22, 0x00	; 0
 628:	08 95       	ret

0000062a <__fp_nan>:
 62a:	9f ef       	ldi	r25, 0xFF	; 255
 62c:	80 ec       	ldi	r24, 0xC0	; 192
 62e:	08 95       	ret

00000630 <__fp_pscA>:
 630:	00 24       	eor	r0, r0
 632:	0a 94       	dec	r0
 634:	16 16       	cp	r1, r22
 636:	17 06       	cpc	r1, r23
 638:	18 06       	cpc	r1, r24
 63a:	09 06       	cpc	r0, r25
 63c:	08 95       	ret

0000063e <__fp_pscB>:
 63e:	00 24       	eor	r0, r0
 640:	0a 94       	dec	r0
 642:	12 16       	cp	r1, r18
 644:	13 06       	cpc	r1, r19
 646:	14 06       	cpc	r1, r20
 648:	05 06       	cpc	r0, r21
 64a:	08 95       	ret

0000064c <__fp_round>:
 64c:	09 2e       	mov	r0, r25
 64e:	03 94       	inc	r0
 650:	00 0c       	add	r0, r0
 652:	11 f4       	brne	.+4      	; 0x658 <.L1^B1>
 654:	88 23       	and	r24, r24
 656:	52 f0       	brmi	.+20     	; 0x66c <.L3^B1>

00000658 <.L1^B1>:
 658:	bb 0f       	add	r27, r27
 65a:	40 f4       	brcc	.+16     	; 0x66c <.L3^B1>
 65c:	bf 2b       	or	r27, r31
 65e:	11 f4       	brne	.+4      	; 0x664 <.L2^B1>
 660:	60 ff       	sbrs	r22, 0
 662:	04 c0       	rjmp	.+8      	; 0x66c <.L3^B1>

00000664 <.L2^B1>:
 664:	6f 5f       	subi	r22, 0xFF	; 255
 666:	7f 4f       	sbci	r23, 0xFF	; 255
 668:	8f 4f       	sbci	r24, 0xFF	; 255
 66a:	9f 4f       	sbci	r25, 0xFF	; 255

0000066c <.L3^B1>:
 66c:	08 95       	ret

0000066e <_exit>:
 66e:	f8 94       	cli

00000670 <__stop_program>:
 670:	ff cf       	rjmp	.-2      	; 0x670 <__stop_program>
